@using System.ServiceModel.Dispatcher
@model InrappSos.AstridWeb.Models.ViewModels.AdminViewModels.AdminViewModel
@{
    ViewBag.Title = "Admin";
}

<link href="~/Scripts//bootstrap-multiselect/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/bootstrap-multiselect/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>

<script type="text/javascript">

    var users = @Html.Raw(Json.Encode(Model.AdminUsers));
    var usersRoleObjects = [];
    users.forEach(function (user, index) {
        usersRoleObjects[index] = user.ListOfRoles;
    });

    $(function () {
        //Göm kolumnen med dropdown/Roller om ej edit-mode
        $('#adminUsersTable tr th:eq(0)').hide();
        $('#adminUsersTable tr th:eq(4)').hide();
        $("#adminUsersTable tbody tr").each(function (i, row) {
            $(row).find('td:eq(0)').hide();
            $(row).find('td:eq(4)').hide();
        });

        //Tabort-dialog
        var modalConfirm = function test(callback) {
            $("#modal-btn-si").on("click", function () {
                callback(true);
                $("#mi-modal").modal('hide');
            });
            $("#modal-btn-no").on("click", function () {
                callback(false);
                $("#mi-modal").modal('hide');
            });
        };

        modalConfirm(function (confirm) {
            if (confirm) {
                var data = { 'userId': $('#SelectedUser').val() };
                $.ajax({
                    url: '/Admin/DeleteAdminUser',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(data),
                    success: function (data) {
                        //On ajax success do this
                        location.reload();
                        //$("#pageContainer").html(data);
                        //tr.find('.edit-mode, .display-mode').toggle();
                        //$('#footer').hide();
                    }
                });
            } else {
                //Do nothing
                //$("#result").html("NO CONFIRMADO");
            }
        });

        //Multiselect
        $('[id*=ddlRoleList]').multiselect({
            onInitialized: function () {
                var ddls = getTableRowsDDLs();

                users.forEach(function(user, idx) {
                    $.each(user.ListOfRoles, function (index, item) {
                        if (item.Selected) {
                            //hitta rätt rad/rätt drop
                            var ddl = ddls[idx];
                            var options = ddl.options;
                            options[index].selected = true;
                            options[index].checked = true;
                            }
                            //$("#ddlRoleList > option")[index].selected = true;
                            //$("#ddlRoleList > option")[index].checked = true;
                    });
                });
                this.refresh();
            },
            onChange: function (option, checked, select) {
                //Update string of ChosenRoles
                //var roleId = $(option).val();
                //var roleName = $("#ddlRoleList option:selected").text();
                var roleName = $(option).text();
                var userId = $('#SelectedUser').val();
                users.forEach(function(user, index) {
                    if (user.Id === userId) {
                        var rolesStr = user.StringOfRoles;
                        //var splitStr = rolesStr.split(',');
                        //var roles = user.Roles;
                        //var x = user.ListOfRoles;
                        user.StringOfRoles = "";
                        $.each(usersRoleObjects, function (idx, item) {
                            //Hitta användarens rollista
                            if (idx === index) {
                                //loopa användarens rollista
                                item.forEach(function(roll, i) {
                                    if (roll.Name === roleName) {
                                        if (roll.Selected) {
                                            roll.Selected = false;
                                        } else {
                                            roll.Selected = true;
                                        }
                                    }
                                });
                            }
                        });
                    }
                });
                //setChosenRolesStr();
            },
            //onSelectAll: function () {
            //    $.each(orgtyper, function (index, item) {
            //        $('#OrgtypesForOrgList_' + index + '__Selected').val('True');
            //    });
            //},
            //onDeselectAll: function () {
            //    $.each(orgtyper, function (index, item) {
            //        $('#OrgtypesForOrgList_' + index + '__Selected').val('False');
            //    });
            //},
            includeSelectAllOption: false,
            nonSelectedText: 'Välj roll',
            allSelectedText: 'Alla valda',
            selectAllText: "Välj alla",
            nSelectedText: "valda",
            astridDefaultText: "Välj roll"
        });

        //funktioner för editerbara gridden
        $('.edit-mode').hide();
        $('.cancel-user').on('click',
            function () {
                var tr = $(this).parents('tr:first');
                $('#SelectedUser').val();
                //Göm kolumnen med dropdown/Roller om ej edit-mode
                tr.find('td:eq(4)').hide();
                tr.find('td:eq(3)').show();
                tr.find('.edit-mode, .display-mode').toggle();
            });

        $('.edit-user').on('click',
            function () {
                var tr = $(this).parents('tr:first');
                var userId = tr.find("#Id").val();
                $('#SelectedUser').val(userId);
                var drop = tr.find("#ddlRoleList");
                //Visa kolumnen med dropdown/Roller om edit-mode
                tr.find('td:eq(4)').show();
                tr.find('td:eq(3)').hide();
                tr.find('.edit-mode, .display-mode').toggle();
                ////Sätt i dropdown vilka roller som redan är satta för vald användare
                //users.forEach(function(user, idx) {
                //    if (user.Id === userId) {
                //        var usersDrop = tr.find("#ddlRoleList");
                //        var options = usersDrop[0].options;
                //        $.each(user.ListOfRoles, function (index, item) {
                //            if (item.Selected) {
                //                options[index].checked = true;
                //                options[index].selected = true;
                //            } else {
                //                options[index].checked = false;
                //                options[index].selected = false;
                //            }
                //            //tr.find("#ddlRoleList > option")[index].selected = true;
                //            //tr.find("#ddlRoleList > option")[index].checked = true;
                //            //if (item.Selected) {
                //            ////
                //            ////    $("#ddlRoleList > option")[index].selected = true;
                //            ////    //drop[1].selected = true;
                //            ////    //drop[index].selected = true;
                //            ////    tr.find("#ddlRoleList > option")[index].selected = true;
                //            ////    tr.find("#ddlRoleList > option")[index].checked = true;
                //            //}
                //        });
                //        //refresh();
                //        //SetChosenRolesObjectList(user.ListOfRoles, drop);
                //    }
                //});
                //var x = tr.find("#ddlRoleList");
                //var tmp = x[0];
                //tmp.refresh();
                ////$('[id*=ddlRoleList]').multiselect.refresh();
                //var y = 1;
            });
        $('.save-user').on('click',
            function () {
                var tr = $(this).parents('tr:first');
                var userId = tr.find("#Id").val();
                var phonenumber = tr.find("#PhoneNumber").val();
                var email = tr.find("#Email").val();
                var rolesStr = "";
                var listOfRoles = [];
                users.forEach(function (user, index) {
                    if (user.Id === userId) {
                        rolesStr = user.StringOfRoles;
                        listOfRoles = user.ListOfRoles;
                    }
                });

                //Creating AppUserAdmin JSON object
                var user =
                    {
                        "Id": userId,
                        "Phonenumber": phonenumber,
                        "Email": email,
                        "StringOfRoles": rolesStr,
                        "ListOfRoles": listOfRoles
                    };
                //Posting AppUserAdmin object to controller's Update action method
                $.ajax({
                    url: '/Admin/UpdateAdminUser',
                    data: JSON.stringify(user),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        location.reload();
                        //$("#pageContainer").html(data);
                        //tr.find('.edit-mode, .display-mode').toggle();
                        //$('#footer').hide();
                        //alert('Record updated Successfully!!');
                    }
                });
            });
        }); //slut document.ready

     function getTableRowsDDLs() {
        return $(".ddl");
    }

    function deleteAdminUser(id) {
        $('#SelectedUser').val(id);
        $("#mi-modal").modal("show");
        $('#modal-body').html("Vill du verkligen ta bort ta bort användaren?");
    }

</script>

<div class="modal fade ui-widget-content" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true" id="mi-modal">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body" id="modal-body">
                <p>

                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="modal-btn-si">Ja</button>
                <button type="button" class="btn btn-default" id="modal-btn-no">Avbryt</button>
            </div>
        </div>
    </div>
</div>

@if (Model != null)
{
    @Html.HiddenFor(m => m.SelectedUser)

    if (Model.AdminUsers != null)
    {
        for (int i = 0; i < Model.AdminUsers.Count; i++)
        {
            @Html.HiddenFor(x => x.AdminUsers[i].Id)
            @Html.HiddenFor(x => x.AdminUsers[i].StringOfRoles)
            @Html.HiddenFor(x => x.AdminUsers[i].ListOfRoles)
        }
    }

    if (Model.Roller != null)
    {
        for (int i = 0; i < Model.Roller.Count; i++)
        {
            @Html.HiddenFor(x => x.Roller[i].Id)
            @Html.HiddenFor(x => x.Roller[i].Name)
            @Html.HiddenFor(x => x.Roller[i].Selected)
        }
    }

    <div id="pageContainer">
        <div class="row">
            <div class="col-md-8 padding-top-55">
                <h4>Administrera Astrid-användare</h4>
                <section id="adminUsersForm">
                    <br /><br />
                    <hr />

                    <div id="gridContent" style="font-family: Arial; padding: 20px;">
                        @{
                            ViewBag.Title = "Administrera Astrid-användare";
                            var grid = new WebGrid(source: Model.AdminUsers, canPage: false, rowsPerPage: 10, ajaxUpdateContainerId: "adminUsersGrid");
                        }

                        @grid.GetHtml(htmlAttributes: new { id = "adminUsersTable" },
                                                          tableStyle: "webgrid-table",
                                                          headerStyle: "webgrid-header",
                                                          footerStyle: "webgrid-footer",
                                                          alternatingRowStyle: "webgrid-alternating-row",
                                                          selectedRowStyle: "webgrid-selected-row",
                                                          rowStyle: "webgrid-row-style",
                                                          mode: WebGridPagerModes.All,
                                                          columns: grid.Columns(
                                                              grid.Column(null, null, format: @<text><input type="hidden" id="Id" value="@item.Id" class="edit-mode form-control hide" /></text>, style: "colZeroWidth"),
                  grid.Column("Email", "Email", format: @<text><span class="display-mode"><label id="lblEmail" style="width: 300px;">@item.Email</label></span>
                                <input type="text" id="Email" value="@item.Email" class="edit-mode form-control" /></text>, style: "col4Width"),
                grid.Column("PhoneNumber", "Telefonnummer", format: @<text><span class="display-mode"><label id="lblDescription" style="width: 200px;">@item.PhoneNumber  </label></span>
                <input type="text" id="PhoneNumber" value="@item.PhoneNumber" class="edit-mode form-control" /></text>, style: "colMinWidth"),
                grid.Column("Roller", "Roller", format: @<text><label id="lblRoller" >@item.StringOfRoles</label></text>, style: "col2Width"),
                //grid.Column("Roller", format: @item => Html.DropDownListFor(m => m.Roller, new SelectList(@item.ListOfRoles, "Id", "Name"), " - Välj roll -", new { id = "ddlRoleList", @class = "form-control edit-mode", style = "min-width:100px !important" })),
                grid.Column("Roller", format: @item => Html.DropDownListFor(m => m.Roller, new SelectList(@item.ListOfRoles, "Id", "Name"), new { id = "ddlRoleList", @class = "form-control edit-mode ddl", multiple = "multiple", style = "min-width:100px !important" })),

                grid.Column(null, format: @<text>
                    <button class="edit-user display-mode btn btn-default">Ändra</button>
                    <button class="display-mode btn btn-default" onclick="deleteAdminUser('@item.Id'); return false;">Ta bort</button>
                    <button class="save-user edit-mode btn btn-default">Spara</button>
                    <button class="cancel-user edit-mode btn btn-default">Avbryt</button>
                </text>, style: "col3Width", canSort: false)))

                    </div>
                </section>
            </div>
        </div>
    </div>
}

