@using InrappSos.AstridWeb.Models.ViewModels
@model InrappSos.AstridWeb.Models.ViewModels.OrganisationViewModels.SFTPkontoViewModel
@{
    ViewBag.Title = "SFTP-konto";
}

<link href="~/Scripts/bootstrap-multiselect/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/bootstrap-multiselect/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>

<script type="text/javascript">

    var contacts = @Html.Raw(Json.Encode(Model.ListOfContacts));

    $(function () {
        $("#Kontonamn").focus();
    });

    $(document).ready(function () {
        $('[id*=ContactsList]').multiselect({
            onInitialized: function () {
                $.each(contacts, function (index, item) {
                    if (item.Selected) {
                        $("#ContactsList > option")[index].selected = true;
                        $("#ContactsList > option")[index].checked = true;
                    }
                });
                this.refresh();
            },
            onChange: function (option, checked, select) {
                //Update string of names, ChosenContacts
                $('#ChosenContacts').val("");
                $.each(contacts, function (index, item) {
                    var y = $('#ListOfContacts_' + index + '__Id').val();
                    if ($('#ListOfContacts_' + index + '__Id').val() === $(option).val()) {
                        if ($('#ListOfContacts_' + index + '__Selected').val() === 'False')
                            $('#ListOfContacts_' + index + '__Selected').val('True');
                        else
                            $('#ListOfContacts_' + index + '__Selected').val('False');
                    }
                });
                setChosenContacts();
            },
            onSelectAll: function () {
                $.each(contacts, function (index, item) {
                    $('#ListOfContacts' + index + '__Selected').val('True');
                });
            },
            onDeselectAll: function () {
                $.each(contacts, function (index, item) {
                    $('#ListOfContacts' + index + '__Selected').val('False');
                });
            },
            includeSelectAllOption: false,
            nonSelectedText: 'Välj kontaktperson',
            allSelectedText: 'Alla valda',
            selectAllText: "Välj alla",
            nSelectedText: "valda",
            astridDefaultText: "Välj kontaktperson"
        });
    });

    function setChosenContacts() {
        var contactsStr = "";

        [].forEach.call(document.querySelectorAll('#ContactsList :checked'),
            function (contact) {
                if (contactsStr === "") {
                    contactsStr = contactsStr + contact.text;
                } else {
                    contactsStr = contactsStr + ", " + contact.text;
                }
            });

        $('#contactsNames').val(contactsStr);
    }

    $(document).on('change', '#ddlRegister', function () {
        $("#RegisterId").val($('#ddlRegister').val());
    });


</script>


<div id="editSFTPAccount" class="form-horizontal padding-top-55">

    <h4>Skapa SFTP-konto</h4>
    <hr />

    @using (Html.BeginForm("CreateOrganisationSFTPAccount", "Organisation", new { selectedOrganisationId = Model.OrganisationsId }, FormMethod.Post, null))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })@Html.HiddenFor(m => m.ChosenContacts)

        if (Model.ListOfContacts != null)
        {
            for (int i = 0; i < Model.ListOfContacts.Count; i++)
            {
                @Html.HiddenFor(x => x.ListOfContacts[i].Id)
                @Html.HiddenFor(x => x.ListOfContacts[i].Email)
                @Html.HiddenFor(x => x.ListOfContacts[i].Selected)
            }
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Kontonamn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Kontonamn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Kontonamn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Register", new { @class = "control-label col-md-2" })
            <div class="col-md-10" style="width: 255px !important;">
                @Html.DropDownListFor(m => m.RegisterId, ViewBag.RegisterList as SelectList, " - Välj register -", new { id = "ddlRegister", @class = "form-control", style = "max-width:250px !important" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Kontaktpersoner", new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.ChosenContacts, new { id = "contactsNames", @class = "form-control", disabled = "disabled" })
            </div>
            @if (Model.ListOfContacts != null)
            {
                <div class="col-md-7" style="padding-left: 20px; float: left;">
                    <select id="ContactsList" multiple="multiple">
                        @for (var i = 0; i < Model.ListOfContacts.Count; i++)
                        {
                            <option value=@Model.ListOfContacts[i].Id>@Model.ListOfContacts[i].Email</option>
                        }
                    </select>
                    @Html.ValidationMessage("CustomError", new { @class = "text-danger" })
                </div>
            }

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Spara" class="btn btn-default" />
            </div>
        </div>

        <div>
            @Html.ActionLink("Tillbaka", "GetOrganisationsSFTPAccounts", "Organisation", new { selectedOrganisationId = Model.OrganisationsId }, null)

        </div>
    }

</div>
<br />
<br />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}

