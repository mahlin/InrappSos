@model InrappSos.AstridWeb.Models.ViewModels.OrganisationViewModels.OrganisationViewModel

<link href="~/Scripts//bootstrap-multiselect/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/bootstrap-multiselect/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>

<script type="text/javascript">

    var accounts = @Html.Raw(Json.Encode(Model.SFTPAccounts));
    var accountsContactObjects = [];
    accounts.forEach(function (account, index) {
        accountsContactObjects[index] = account.ListOfContacts;
    });

    $(document).ready(function () {

        //Göm kolumner med id:n och med dropdown/Register och kontakpersoner om ej edit-mode
        $('#accountsTable tr th:eq(0)').hide();
        $('#accountsTable tr th:eq(1)').hide();
        $('#accountsTable tr th:eq(4)').hide();
        $('#accountsTable tr th:eq(6)').hide();
        $("#accountsTable tbody tr").each(function (i, row) {
            $(row).find('td:eq(0)').hide();
            $(row).find('td:eq(1)').hide();
            $(row).find('td:eq(4)').hide();
            $(row).find('td:eq(6)').hide();
        });
    });


    $(function () {
        $("#searchText").focus();
    });

    $(function () {
        //Multiselect
        $('[id*=ddlContactList]').multiselect({
            onInitialized: function () {
                var ddls = getTableRowsDDLs();

                accounts.forEach(function (account, idx) {
                    $.each(account.ListOfContacts, function (index, item) {
                        if (item.Selected) {
                            //hitta rätt rad/rätt drop
                            var ddl = ddls[idx];
                            var options = ddl.options;
                            options[index].selected = true;
                            options[index].checked = true;
                        }
                    });
                });
                this.refresh();
            },
            onChange: function (option, checked, select) {
                //Update string of ChosenRoles
                //var roleId = $(option).val();
                //var roleName = $("#ddlRoleList option:selected").text();
                var contactEmail = $(option).text();
                var accountId = $('#SelectedAccountId').val();
                accounts.forEach(function (account, index) {
                    if (account.Id === parseInt(accountId)) {
                        account.StringOfChosenContacts = "";
                        $.each(accountsContactObjects, function (idx, item) {
                            //Hitta kontots kontaktlista
                            if (idx === index) {
                                //loopa kontots kontaktlista
                                item.forEach(function (contact, i) {
                                    if (contact.Email === contactEmail) {
                                        if (contact.Selected) {
                                            contact.Selected = false;
                                        } else {
                                            contact.Selected = true;
                                        }
                                    }
                                });
                            }
                        });
                    }
                });
            },
            includeSelectAllOption: false,
            nonSelectedText: 'Välj kontakt',
            allSelectedText: 'Alla valda',
            selectAllText: "Välj alla",
            nSelectedText: "valda",
            astridDefaultText: "Välj kontakt"
        });

        $('.edit-mode').hide();
        $(' .cancel-user').on('click', function () {
            var tr = $(this).parents('tr:first');
            $('#SelectedAccountId').val();
            //Göm kolumnen med dropdown/Register och kontaktpersoner om ej edit-mode
            tr.find('td:eq(4)').hide();
            tr.find('td:eq(3)').show();
            tr.find('td:eq(6)').hide();
            tr.find('td:eq(5)').show();
            tr.find('.edit-mode, .display-mode').toggle();
        });
        $('.edit-user').on('click', function () {
            var tr = $(this).parents('tr:first');
            var accountId = tr.find("#AccountId").val();
            $('#SelectedAccountId').val(accountId);
            //Visa kolumnen med dropdown/Register och kontaktpersoner om edit-mode
            tr.find('td:eq(4)').show();
            tr.find('td:eq(3)').hide();
            tr.find('td:eq(6)').show();
            tr.find('td:eq(5)').hide();
            tr.find('.edit-mode, .display-mode').toggle();
        });
        $('.save-user').on('click', function () {
            var tr = $(this).parents('tr:first');
            var accountId = tr.find("#AccountId").val();
            var accountName = tr.find("#AccountName").val();
            var registerName = tr.find("#RegisterName").val();
            var contactsStr = "";
            var listOfContacts = [];
            accounts.forEach(function (account, index) {
                if (account.Id === parseInt(accountId)) {
                    contactsStr = account.StringOfChosenContacts;
                    listOfContacts = account.ListOfContacts;
                }
            });
            var orgId = $('#SelectedOrganisationId').val();
            //var regId = tr.find("#ddlRegister").val();
            var regId = tr.find("#ddlRegister").val() || 0;
            if (regId === 0) {//om inte register ändrats
                regId = tr.find("#RegisterId").val();
            }
             

            //Creating SFTPkonto JSON object
            var sftpAccount =
            {
                "Id": accountId,
                "OrganisationsId": orgId,
                "Kontonamn": accountName,
                "Registernamn": registerName,
                "RegisterId": regId,
                "StringOfChosenContacts": contactsStr,
                "ListOfContacts": listOfContacts
            };
            //Posting SFTPkonto object to controller's Update action method
            $.ajax({
                url: '/Organisation/UpdateOrganisationSFTPAccount',
                data: JSON.stringify(sftpAccount),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    location.reload();
                    //$("#pageContainer").html(data);
                    //tr.find('.edit-mode, .display-mode').toggle();
                    //$('#footer').hide();
                    //alert('Record updated Successfully!!');
                }
            });

        });

        $('.edit-user').on('click', function () {
            var tr = $(this).parents('tr:first');
            var accountName = tr.find("#AccountName").val();
            var registerName = tr.find("#RegisterName").val();
            //Visa kolumnen med dropdown/Register och kontaktpersonerom ej edit-mode
            tr.find('td:eq(4)').show();
            tr.find('td:eq(3)').hide();
            tr.find('td:eq(6)').show();
            tr.find('td:eq(5)').hide();
            var currentRegId = tr.find("#RegisterId").val();
            if (currentRegId !== "0") {
                tr.find("#ddlRegister").val(currentRegId);
            } else {
                tr.find("#ddlRegister").val("");
            }

            tr.find("#lblAccountName").text(accountName);
            tr.find("#lblRegisterName").text(registerName);
        });
    });

    function getTableRowsDDLs() {
        return $(".ddl");
    }


    $(document).on('change', '#ddlRegister', function () {
        $("#SelectedRegisterId").val($('#ddlRegister').val());
        $('#RegisterId').val($('#ddlRegister').val());
    });


</script>
<div id="pageContainer">
    @Html.HiddenFor(m => m.Kommunkod)

    <div class="row">
        <div class="col-md-8 padding-top-25">
            <section id="orgForm">
                @Html.AntiForgeryToken()
                <h4>Administrera SFTP-konton för organisation</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @using (Html.BeginForm("SearchOrganisation", "Organisation", new { origin = "sftpAccounts" }, FormMethod.Post, null))
                {
                    <div class="container">
                        <div class="row">
                            <div class="col-md-6">
                                <div id="custom-search-input">
                                    <div class="input-group col-md-12">
                                        <input type="text" class="form-control" id="searchText" name="searchText" style="max-width: 550px !important;" placeholder="Sök med organisationskod eller organisationsnamn" />
                                        <span class="input-group-btn">
                                            <button class="btn btn-info btn-lg" type="submit">
                                                <i class="glyphicon glyphicon-search"></i>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </section>
        </div>
    </div>
    <br />


    @if (Model != null)
    {
        @* Om sökresultat finns, visa listan *@
        if (Model.SearchResult.Count > 0 && Model.SearchResult[0].Count > 0)
        {
            @Html.Partial("_SearchResult")
        }
        @* Om inga sökträffar *@
        else if (Model.SearchResult.Count == 1 && Model.SearchResult[0].Count == 0 && Model.Organisation == null)
        {
            <h2>Din sökning på gav inget resultat. </h2>
        }
        @* Om en relevant organisation hittats, visa organisationsinfon *@
        else if (Model.Organisation != null)
        {
            @Html.HiddenFor(m => m.SelectedAccountId)
            @Html.HiddenFor(m => m.SelectedOrganisationId)
            @Html.HiddenFor(m => m.SelectedRegisterId)

            if (Model.SFTPAccounts != null)
            {
                for (int i = 0; i < Model.SFTPAccounts.Count; i++)
                {
                    @Html.HiddenFor(x => x.SFTPAccounts[i].Id)
                    @Html.HiddenFor(x => x.SFTPAccounts[i].OrganisationsId)
                    @Html.HiddenFor(x => x.SFTPAccounts[i].StringOfChosenContacts)
                    @Html.HiddenFor(x => x.SFTPAccounts[i].ListOfContacts)
                }
            }

            <div style="font-size: 1.2em; padding-left: 20px; padding-bottom: 20px;"><b>@Model.Organisation.Organisationsnamn</b></div>

            if (Request.IsAuthenticated)
            {
                if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin"))
                {
                    <div style="padding-left: 20px; padding-bottom: 20px;">@Html.ActionLink("Skapa nytt SFTP-konto", "CreateOrganisationSFTPAccount", "Organisation", new { selectedOrganisationId = Model.SelectedOrganisationId }, null)</div>


                    <div id="gridContent" style="font-family: Arial; padding: 20px;">

                        @{
                            ViewBag.Title = "Administrera SFTP-konton";
                            var grid = new WebGrid(source: Model.SFTPAccounts, canPage: false, rowsPerPage: 10, ajaxUpdateContainerId: "accountsGrid");
                        }

                        @grid.GetHtml(htmlAttributes: new {id = "accountsTable"},
                            tableStyle: "webgrid-table900",
                            headerStyle: "webgrid-header",
                            footerStyle: "webgrid-footer",
                            alternatingRowStyle: "webgrid-alternating-row",
                            selectedRowStyle: "webgrid-selected-row",
                            rowStyle: "webgrid-row-style",
                            mode: WebGridPagerModes.All,
                            columns: grid.Columns(
                                grid.Column(null, null, format: @<input type="hidden" id="AccountId" name="IDHidden" value="@item.Id" />),
                                         grid.Column(null, null, format: @<input type="hidden" id="RegisterId" value="@item.RegisterId" />),
                                             grid.Column("Kontonamn", "Namn", format: @<text><span class="display-mode"><label id="lblRAccountName">@item.Kontonamn</label></span>
                                            <input type="text" id="AccountName" value="@item.Kontonamn" class="edit-mode form-control" /></text>, style: "col3Width"),
                                                 grid.Column("Registernamn", "Register", format: @<text><span class="display-mode"><label id="lblRegister" style="width: 50px;">@item.Registernamn</label></span></text>, style: "colMinWidth"),
                                                     grid.Column("Registernamn", format: @item => Html.DropDownListFor(m => m.SelectedRegisterId, ViewBag.RegisterList as SelectList, " - Välj -", new { id = "ddlRegister", @class = "form-control edit-mode", style = "min-width:100px !important" })),

                                                     grid.Column("Kontakter", "Kontakter", format: @<text><label id="lblContacts" style="display: inline-block;">@item.StringOfChosenContacts</label></text>, style: "col3Width"),
                                                         grid.Column("Kontakter", format: @item => Html.DropDownListFor(m => m.ContactPersons, new SelectList(@item.ListOfContacts, "Id", "Email"), new { id = "ddlContactList", @class = "form-control edit-mode ddl", multiple = "multiple", style = "min-width:100px !important" })),

                                                         grid.Column(null, format: @<text>
                                                            <button class="edit-user display-mode btn btn-default">Ändra</button>
                                                            <button class="save-user edit-mode btn btn-default">Spara</button>
                                                            <button class="cancel-user edit-mode btn btn-default">Avbryt</button>
                                                        </text>, style: "col3Width", canSort: false)))

                    </div>
                }
                else
                {
                    <div id="gridContent" style="font-family: Arial; padding: 20px;">

                        @{
                            ViewBag.Title = "SFTP-konton";
                            var grid = new WebGrid(source: Model.SFTPAccounts, canPage: false, rowsPerPage: 10, ajaxUpdateContainerId: "accountsGrid");
                        }

                        @grid.GetHtml(htmlAttributes: new {id = "accountsTable"},
                            tableStyle: "webgrid-table900",
                            headerStyle: "webgrid-header",
                            footerStyle: "webgrid-footer",
                            alternatingRowStyle: "webgrid-alternating-row",
                            selectedRowStyle: "webgrid-selected-row",
                            rowStyle: "webgrid-row-style",
                            mode: WebGridPagerModes.All,
                            columns: grid.Columns(
                                grid.Column(null, null, format: @<input type="hidden" id="AccountId" name="IDHidden" value="@item.Id" />),
                                grid.Column(null, null, format: @<input type="hidden" id="RegisterId" value="@item.RegisterId" />),
                                grid.Column("Kontonamn", "Namn", format: @<text><span class="display-mode"><label id="lblRAccountName">@item.Kontonamn</label></span></text>, style: "col3Width"),
                                grid.Column("Registernamn", "Register", format: @<text><span class="display-mode"><label id="lblRegister" style="width: 50px;">@item.Registernamn</label></span></text>, style: "colMinWidth"),
                                grid.Column("Registernamn", format: @item => Html.DropDownListFor(m => m.SelectedRegisterId, ViewBag.RegisterList as SelectList, " - Välj -", new { id = "ddlRegister", @class = "form-control edit-mode", style = "min-width:100px !important" })),
                                grid.Column("Kontakter", "Kontakter", format: @<text><label id="lblContacts" style="display: inline-block;">@item.StringOfChosenContacts</label></text>, style: "col3Width"),
                                grid.Column("Kontakter", format: @item => Html.DropDownListFor(m => m.ContactPersons, new SelectList(@item.ListOfContacts, "Id", "Email"), new { id = "ddlContactList", @class = "form-control edit-mode ddl", multiple = "multiple", style = "min-width:100px !important" }))
                                ))

                    </div>
                }
            }
        }
    }

</div>