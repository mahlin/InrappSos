@using InrappSos.AstridWeb.Models.ViewModels
@model InrappSos.AstridWeb.Models.ViewModels.OrganisationViewModels.OrganisationViewModel
@{
    ViewBag.Title = "Organisation";
}

<link href="~/Scripts/bootstrap-multiselect/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/bootstrap-multiselect/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>

<script src="@Url.Content("~/Scripts/custom.js")" type="text/javascript"></script>

<script type="text/javascript">

    var orgtyper = @Html.Raw(Json.Encode(Model.OrgtypesForOrgList));
    var isValid = @Html.Raw(Json.Encode(ViewData.ModelState.IsValid));


    $(function () {
        $("#searchText").focus();
    });

    $(document).ready(function () {
        if (isValid) {
            hideEditableForm();
        }
        else if (!isValid) {
            showEditableForm();
        }
        
        $('[id*=OrgtypList]').multiselect({
            onInitialized: function () {
                $.each(orgtyper, function (index, item) {
                    if (item.Selected) {
                        $("#OrgtypList > option")[index].selected = true;
                        $("#OrgtypList > option")[index].checked = true;
                    }
                });
                this.refresh();
            },
            onChange: function (option, checked, select) {
                //Update string of names, ChosenOrganisationTypesNames
                $('#ChosenOrganisationTypesNames').val("");
                $.each(orgtyper, function (index, item) {
                    if ($('#OrgtypesForOrgList_' + index + '__Organisationstypid').val() === $(option).val()) {
                        if ($('#OrgtypesForOrgList_' + index + '__Selected').val() === 'False')
                            $('#OrgtypesForOrgList_' + index + '__Selected').val('True');
                        else
                            $('#OrgtypesForOrgList_' + index + '__Selected').val('False');
                    }
                });
                setChosenOrganisationTypesNames();
            },
            onSelectAll: function () {
                $.each(orgtyper, function (index, item) {
                    $('#OrgtypesForOrgList_' + index + '__Selected').val('True');
                });
            },
            onDeselectAll: function () {
                $.each(orgtyper, function (index, item) {
                    $('#OrgtypesForOrgList_' + index + '__Selected').val('False');
                });
            },
            includeSelectAllOption: false,
            nonSelectedText: 'Ändra organisationstyp',
            allSelectedText: 'Alla valda',
            selectAllText: "Välj alla",
            nSelectedText: "valda",
            astridDefaultText: "Ändra organisationstyp"
        });
    });

    function setChosenOrganisationTypesNames() {
        var orgtypStr = "";

        [].forEach.call(document.querySelectorAll('#OrgtypList :checked'),
            function (orgtyp) {
                if (orgtypStr === "") {
                    orgtypStr = orgtypStr + orgtyp.text;
                } else {
                    orgtypStr = orgtypStr + ", " + orgtyp.text;
                }
            });

        $('#orgTypeNames').val(orgtypStr);
    }

    function showEditableForm() {
        $('#readOnlyOrg').hide();
        $('#editOrg').show();
    };

    function hideEditableForm() {
        $('#editOrg').hide();
        $('#readOnlyOrg').show();
    };


    $('#cancelLink').click(function () {
        $('#editOrg').hide();
        $('#readOnlyOrg').show();
        return false;
    });

    $('#editLink').click(function () {
        $('#readOnlyOrg').hide();
        $('#editOrg').show();
        return false;
    });


</script>
<br />
<div class="row">
    <div class="col-md-8 padding-top-25">
        <section id="orgForm">
            @Html.AntiForgeryToken()
            <h4>Administrera organisation</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @using (Html.BeginForm("SearchOrganisation", "Organisation", new { origin = "index" }, FormMethod.Post, null))
            {
                <div class="container">
                    <div class="row">
                        <div class="col-md-6">
                            <div id="custom-search-input">
                                <div class="input-group col-md-12">
                                    <input type="text" class="form-control" id="searchText" name="searchText" style="max-width: 350px !important;" placeholder="Sök med organisationskod eller organisationsnamn" />
                                    <span class="input-group-btn">
                                        <button class="btn btn-info btn-lg" type="submit">
                                            <i class="glyphicon glyphicon-search"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </section>
    </div>
</div>
<br />

@if (Model != null)
{
    @* Om sökresultat finns, visa listan *@
    if (Model.SearchResult.Count > 0 && Model.SearchResult[0].Count > 0)
    {
        @Html.Partial("_SearchResult")
    }
    @* Om inga sökträffar *@
    else if (Model.SearchResult.Count == 1 && Model.SearchResult[0].Count == 0 && Model.Organisation == null)
    {
        <h2>Din sökning på gav inget resultat. </h2>
    }
    @* Om en relevant organisation hittats, visa organisationsinfon *@
    else if (Model.Organisation != null)
    {
        @Html.HiddenFor(m => m.Kommunkod)
        ;
        @Html.HiddenFor(m => m.SelectedOrganisationId)



        @*@Html.HiddenFor(m => m.OrgtypesForOrgList)*@

        <div style="font-size: 1.2em; padding-left: 20px; padding-bottom: 20px;"><b>@Model.Organisation.Organisationsnamn</b>
        </div>
        <div id="readOnlyOrg">
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Landstingskod)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Landstingskod)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Kommunkod)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Kommunkod)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Inrapporteringskod)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Inrapporteringskod)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Organisationstyp)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.ChosenOrganisationTypesNames)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Organisationsnr)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Organisationsnr)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Organisationsnamn)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Organisationsnamn)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Hemsida)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Hemsida)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.EpostAdress)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.EpostAdress)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Telefonnr)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Telefonnr)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Adress)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Adress)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Postnr)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Postnr)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Postort)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Postort)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.Epostdoman)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.Epostdoman)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.AktivFrom)
                </dt>

                <dd>
                    @*@Html.DisplayFor(model => model.Organisation.AktivFrom == null ? "": model.Organisation.AktivFrom.ToString('yyyy-MM-dd'))*@

                    @Html.DisplayFor(model => model.Organisation.AktivFrom)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.AktivTom)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.AktivTom)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.SkapadDatum)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.SkapadDatum)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.SkapadAv)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.SkapadAv)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.AndradDatum)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.AndradDatum)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Organisation.AndradAv)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Organisation.AndradAv)
                </dd>

            </dl>
            @if (Request.IsAuthenticated)
            {
                if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin"))
                {
                    <input type="button" class="btn btn-primary" value="Ändra organisation" id="editLink" onclick="showEditableForm();return false;"/>
                }
            }

        </div>

        <div id="editOrg" class="form-horizontal">
        @using (Html.BeginForm("UpdateOrganisation", "Organisation", FormMethod.Post, new {@class = "form-horizontal", role = "form"}))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new {@class = "text-danger"})
            @Html.HiddenFor(model => model.Organisation.Id)
            @Html.HiddenFor(m => m.SelectedOrganisationId)
            @Html.HiddenFor(m => m.ChosenOrganisationTypesNames)

            if (Model.OrgtypesForOrgList != null)
            {
                for (int i = 0; i < Model.OrgtypesForOrgList.Count; i++)
                {
                    @Html.HiddenFor(x => x.OrgtypesForOrgList[i].Organisationstypid)
                    @Html.HiddenFor(x => x.OrgtypesForOrgList[i].Typnamn)
                    @Html.HiddenFor(x => x.OrgtypesForOrgList[i].Selected)
                }
            }

            if (Model.ContactPersons != null)
            {
                for (int i = 0; i < Model.ContactPersons.Count; i++)
                {
                    @Html.HiddenFor(x => x.ContactPersons[i].ID)
                    @Html.HiddenFor(x => x.ContactPersons[i].Namn)
                    @Html.HiddenFor(x => x.ContactPersons[i].PhoneNumber)
                    @Html.HiddenFor(x => x.ContactPersons[i].PhoneNumberConfirmed)
                    @Html.HiddenFor(x => x.ContactPersons[i].Status)
                    @Html.HiddenFor(x => x.ContactPersons[i].Email)
                    @Html.HiddenFor(x => x.ContactPersons[i].AktivFrom)
                    @Html.HiddenFor(x => x.ContactPersons[i].AktivTom)
                    @Html.HiddenFor(x => x.ContactPersons[i].Kontaktnummer)
                    @Html.HiddenFor(x => x.ContactPersons[i].ValdaDelregister)
                    @Html.HiddenFor(x => x.ContactPersons[i].StringOfRoles)
                    @Html.HiddenFor(x => x.ContactPersons[i].OkToDelete)

                    if (Model.ContactPersons[i].ListOfRoles != null)
                    {
                        for (int idx = 0; idx < Model.ContactPersons[i].ListOfRoles.Count; idx++)
                        {
                            @Html.HiddenFor(x => x.ContactPersons[i].ListOfRoles[idx].Id)
                            @Html.HiddenFor(x => x.ContactPersons[i].ListOfRoles[idx].Name)
                            @Html.HiddenFor(x => x.ContactPersons[i].ListOfRoles[idx].Selected)
                        }
                    }

                }
            }

            if (Model.OrgUnits != null)
            {
                for (int i = 0; i < Model.OrgUnits.Count; i++)
                {
                    @Html.HiddenFor(x => x.OrgUnits[i].Id)
                    @Html.HiddenFor(x => x.OrgUnits[i].OrganisationsId)
                    @Html.HiddenFor(x => x.OrgUnits[i].Enhetsnamn)
                    @Html.HiddenFor(x => x.OrgUnits[i].Enhetskod)
                    @Html.HiddenFor(x => x.OrgUnits[i].Filkod)
                    @Html.HiddenFor(x => x.OrgUnits[i].AktivFrom)
                    @Html.HiddenFor(x => x.OrgUnits[i].AktivTom)
                }
            }

            if (Model.ReportObligations != null)
            {
                for (int i = 0; i < Model.ReportObligations.Count; i++)
                {
                    @Html.HiddenFor(x => x.ReportObligations[i].Id)
                    @Html.HiddenFor(x => x.ReportObligations[i].OrganisationId)
                    @Html.HiddenFor(x => x.ReportObligations[i].DelregisterId)
                    @Html.HiddenFor(x => x.ReportObligations[i].DelregisterKortnamn)
                    @Html.HiddenFor(x => x.ReportObligations[i].RapporterarPerEnhet)
                    @Html.HiddenFor(x => x.ReportObligations[i].SkyldigFrom)
                    @Html.HiddenFor(x => x.ReportObligations[i].SkyldigTom)
                }
            }

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Landstingskod, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Organisation.Landstingskod, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Landstingskod, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Kommunkod, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Organisation.Kommunkod, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Kommunkod, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Inrapporteringskod, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Organisation.Inrapporteringskod, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Inrapporteringskod, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Organisationstyp, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.ChosenOrganisationTypesNames, new {id = "orgTypeNames", @class = "form-control", disabled = "disabled"})
                </div>
                @if (Model.OrgtypesForOrgList != null)
                {
                    <div class="col-md-7" style="padding-left: 20px; float: left;">
                        <select id="OrgtypList" multiple="multiple">
                            @for (var i = 0; i < Model.OrgtypesForOrgList.Count; i++)
                            {
                                <option value=@Model.OrgtypesForOrgList[i].Organisationstypid>@Model.OrgtypesForOrgList[i].Typnamn</option>
                            }
                        </select>
                        @Html.ValidationMessage("CustomError", new {@class = "text-danger"})
                    </div>
                }
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Organisationsnr, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Organisationsnr, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Organisationsnr, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Organisationsnamn, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Organisationsnamn, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Organisationsnamn, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Hemsida, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Hemsida, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Hemsida, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.EpostAdress, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.EpostAdress, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.EpostAdress, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Telefonnr, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Telefonnr, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Telefonnr, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Adress, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Adress, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Adress, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Postnr, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Postnr, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Postnr, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Postort, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Postort, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Postort, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.Epostdoman, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.Epostdoman, new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.Epostdoman, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.AktivFrom, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.AktivFrom, "{0:yyyy-MM-dd}", new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.AktivFrom, "", new {@class = "text-danger"})
                </div>
            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.Organisation.AktivTom, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Organisation.AktivTom, "{0:yyyy-MM-dd}", new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.Organisation.AktivTom, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                <div class="btn-toolbar">
                    <div class="col-md-offset-2">
                        <input type="submit" value="Spara" class="btn btn-default" style="margin-right: 15px; margin-left: 20px;"/>
                        <input type="button" class="btn btn-default" value="Avbryt" id="cancelEditLink" onclick="hideEditableForm();return false;">
                    </div>
                </div>
            </div>
        }

        </div>
        <br/>
        <br/>

        @Html.Partial("_Contactpersons")
    if (Request.IsAuthenticated)
    {
        if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin"))
        {
                <p>
                    @Html.ActionLink(HttpUtility.HtmlDecode("Administrera kontaktpersoner &raquo;"), "GetOrganisationsContacts", "Organisation", new {selectedOrganisationId = Model.SelectedOrganisationId}, new {@class = "btn btn-primary"})
                </p>
            }
        }
        <br/>
        <br/>
        if (Request.IsAuthenticated)
        {
            if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin") || User.IsInRole("InlasAnsv"))
            {
                @Html.Partial("_Cases")
            }
        }
        if (Request.IsAuthenticated)
        {
            if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin"))
            {
                <p>
                    @Html.ActionLink(HttpUtility.HtmlDecode("Administrera ärenden &raquo;"), "GetOrganisationsCases", "Organisation", new {selectedOrganisationId = Model.SelectedOrganisationId}, new {@class = "btn btn-primary"})
                </p>
                <br/>
                <br/>
            }
        }

        if (Request.IsAuthenticated)
        {
            if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin") || User.IsInRole("InlasAnsv") || User.IsInRole("KvalAnsv"))
            {
                @Html.Partial("_OrgUnits")
        }
    }
    if (Request.IsAuthenticated)
    {
        if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin"))
        {
                <p>
                    @Html.ActionLink(HttpUtility.HtmlDecode("Administrera organisationsenheter &raquo;"), "GetOrganisationsOrgUnits", "Organisation", new {selectedOrganisationId = Model.SelectedOrganisationId}, new {@class = "btn btn-primary"})
                </p>
            }
        }
        <br/>

        <br/>
    if (Request.IsAuthenticated)
    {
        if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin") || User.IsInRole("InlasAnsv") || User.IsInRole("KvalAnsv"))
        {

                @Html.Partial("_ReportObligations")
        }
    }
    if (Request.IsAuthenticated)
    {
        if (User.IsInRole("Admin") || User.IsInRole("InrappAdmin"))
        {
                <p>
                    @Html.ActionLink(HttpUtility.HtmlDecode("Administrera uppgiftsskyldighet &raquo;"), "GetOrganisationsReportObligations", "Organisation", new {selectedOrganisationId = Model.SelectedOrganisationId}, new {@class = "btn btn-primary"})
                </p>
            }
        }
    }
}

 @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    
}

